import streamlit as st
import pandas as pd
import joblib
from limpieza_basica import LimpiezaBasica
from preprocesamiento import preprocesar_datos

# Cargar modelos y escaladores guardados
voting_model = joblib.load("modelo_voting.pkl")
scaler = joblib.load("scaler_robust.pkl")

# Configuraci√≥n de Streamlit
st.title("Predicci√≥n de impago de cr√©ditos üí∞")
st.write("Carga un archivo CSV con los datos de clientes para analizar el riesgo de impago.")

# Subir archivo CSV
archivo = st.file_uploader("Sube tu archivo CSV aqu√≠", type=["csv"])

if archivo:
    df_nuevo = pd.read_csv(archivo)

    # Aplicar limpieza
    df_nuevo_limpio = LimpiezaBasica().fit_transform(df_nuevo)

    # Aplicar preprocesamiento
    columnas_winsor = ['Edad', 'UsoCr√©dito', 'IngresoMensual', 'RatioDeuda',
                       '30-59D√≠asTarde', '60-89D√≠asTarde', '90D√≠asTarde',
                       'Pr√©stamosCasa', 'L√≠neasCr√©dito', 'Dependientes']

    X_nuevo_winsorizado = preprocesar_datos(df_nuevo_limpio, df_nuevo_limpio, None, columnas_winsor)[2]
    X_nuevo_scaled = scaler.transform(X_nuevo_winsorizado)

    # Hacer predicciones
    y_proba = voting_model.predict_proba(X_nuevo_scaled)[:, 1]
    y_pred = (y_proba >= 0.57).astype(int)

    # Agregar resultados al dataframe
    df_nuevo["ProbabilidadImpago"] = y_proba
    df_nuevo["Predicci√≥nFinal"] = y_pred

    # Mostrar tabla con resultados
    st.write("Resultados de predicci√≥n:")
    st.dataframe(df_nuevo[["ProbabilidadImpago", "Predicci√≥nFinal"]])

    # Descargar resultados
    csv = df_nuevo.to_csv(index=False).encode("utf-8")
    st.download_button("Descargar predicciones", csv, "predicciones.csv", "text/csv")

